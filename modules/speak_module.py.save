#################################################################################################################################################
## Este módulo se compone de funciones para la interlocución con lenguajes humanos de forma acústica o lo que es lo mismo TTS (Text to Speech) ##
#################################################################################################################################################

## Importamos librerias
import os
import random
#import festival

## Clase que representa al objeto
class Speak_Module:

	## Variable que contiene el género
	Gender = 'Female'

	## Array que componen los mensajes comúnes
	CommonMessages = {
		"done_messages": ["De acuerdo", "Hecho", "Listo", "Okey", "Vale"]
	}

	## Constructor
	def __init__(self, gender):

		## Inicializamos festival
		# festival.initialize(1, 210000)

		## Fijamos el género con el que configuramos el TTS
		self.Gender = gender

	## Método que devuelve un mensaje de audio para indicar que se ha realizado correctamente una opción
	def SayDoneMessage(self, library_path):

		## Calculamos un indice al azar de mensaje
		message_index = random.randint(0, len(self.CommonMessages["done_messages"]) - 1)

		## Lanzamos el TTS con un mensaje de confirmación correcta seleccionado al azar
		#self.assertTrue(festival.sayText(self.CommonMessages["done_messages"][message_index]))
		os.system('../speak.sh %s' % self.CommonMessages["done_messages"][message_index])
		#subprocess.run([library_path + 'speak.sh',"'" + self.CommonMessages["done_messages"][message_index] + "'"])
